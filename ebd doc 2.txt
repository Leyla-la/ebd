
Báo Cáo Kỹ Thuật Chuyên Sâu: Hệ thống Phát hiện Hành vi Nhân viên (EBD)

Lời Mở Đầu: Đánh giá và Định hình Lại Dự án EBD
Báo cáo này được biên soạn nhằm cung cấp một cái nhìn toàn diện, chi tiết và một lộ trình phát triển rõ ràng cho dự án "Hệ thống Phát hiện Hành vi Nhân viên" (Employee Behavior Detection - EBD). Mục tiêu của dự án là giải quyết các vấn đề hiện hữu tại các doanh nghiệp nhỏ và vừa (SMEs), nơi các hoạt động giám sát hiệu suất nhân viên còn thủ công, thiếu minh bạch và tốn kém. Bằng cách áp dụng các công nghệ Computer Vision và Machine Learning, hệ thống EBD hướng tới việc tự động hóa quá trình phân tích hành vi từ camera văn phòng, từ đó cung cấp các báo cáo hiệu suất và tích hợp với hệ thống lương bổng.1
Dự án đã xác định đúng các điểm khó khăn cốt lõi mà SMEs đang đối mặt, bao gồm việc thiếu một hệ thống giám sát hiệu quả và sự phụ thuộc vào các phương pháp thủ công của bộ phận HR, vốn dễ dẫn đến sai sót và tốn thời gian. Tài liệu ban đầu cũng nhận diện được các thách thức kỹ thuật quan trọng, như việc dataset hạn chế, model có thể nặng và khó phân biệt các hành vi phức tạp. Đồng thời, các vấn đề về môi trường phát triển (Google Colab, VSCode) và tuân thủ pháp lý (GDPR/PDPA) cũng được nêu ra.1
Để chuyển đổi dự án từ một ý tưởng thành một sản phẩm thực tiễn, có khả năng triển khai và mở rộng, báo cáo này sẽ đi sâu vào từng khía cạnh. Nó sẽ cung cấp một kiến trúc hệ thống toàn diện, chiến lược tối ưu hóa hiệu năng mô hình AI, và cấu trúc phần mềm chi tiết. Hơn nữa, báo cáo sẽ giải quyết các băn khoăn cụ thể của nhóm phát triển, đề xuất các giải pháp kỹ thuật cụ thể và đưa ra một lộ trình phát triển vững chắc cho tương lai.
Chương I: Kiến Trúc Hệ thống Tổng thể và Quy trình MLOps

1.1. Sơ đồ Kiến trúc EBD End-to-End

Một hệ thống AI chuyên nghiệp không chỉ là tập hợp các mô hình, mà là một quy trình hoạt động liên tục từ đầu vào đến đầu ra. Kiến trúc của EBD có thể được chia thành bốn lớp chính để đảm bảo sự rõ ràng và khả năng mở rộng:
●Ingest Layer (Lớp đầu vào): Đây là điểm khởi đầu, nơi hệ thống tiếp nhận luồng video từ nhiều nguồn khác nhau như camera an ninh (RTSP), file video (.MP4) hoặc webcam 1. Các công cụ như FFmpeg hoặc GStreamer sẽ chịu trách nhiệm giải mã các luồng video này, chuẩn bị dữ liệu thô cho bước xử lý tiếp theo.
●Processing Layer (Lớp xử lý): Sau khi được giải mã, các frame video được chuyển đến lớp này để thực hiện phân tích hành vi. Đây là "trái tim" của hệ thống, nơi các mô hình AI được sử dụng. Cụ thể, YOLOv8 sẽ thực hiện nhận diện vật thể để xác định vị trí của bàn làm việc và con người 1. Sau đó, các mô hình như MTCNN và FaceNet sẽ nhận diện khuôn mặt và tạo embedding vector để định danh nhân viên 1. Cuối cùng, DeepSORT sẽ đảm nhận việc theo dõi người theo thời gian thực và gán ID duy nhất cho mỗi nhân viên, trong khi các mô hình CNN/LSTM sẽ phân loại trạng thái hành vi 1.
●Data Store (Lớp lưu trữ): Kết quả của quá trình phân tích (như log theo dõi, cảnh báo vi phạm, và dữ liệu hiệu suất) cần được lưu trữ một cách có cấu trúc. PostgreSQL là một lựa chọn phù hợp để lưu trữ các dữ liệu quan trọng này, bao gồm cả các chính sách do quản lý định nghĩa và các bản ghi kiểm toán (audit logs) 1.
●Presentation Layer (Lớp hiển thị): Lớp này chịu trách nhiệm hiển thị thông tin đã được xử lý một cách trực quan cho người dùng cuối. Một giao diện frontend được xây dựng bằng ReactJS sẽ hiển thị video trực tiếp, các biểu đồ phân tích (sử dụng Chart.js), và các cảnh báo theo thời gian thực 1. WebSocket sẽ được sử dụng để truyền dữ liệu phân tích từ backend đến frontend một cách liên tục, đảm bảo trải nghiệm người dùng mượt mà và cập nhật 1.

1.2. Chiến lược Tích hợp Google Colab với FastAPI Backend

Một trong những băn khoăn chính của nhóm là sự khác biệt giữa môi trường Google Colab và VSCode, cũng như việc tích hợp mô hình AI với backend và frontend. Sự băn khoăn này xuất phát từ việc nhìn nhận Google Colab như một môi trường để "chạy" toàn bộ ứng dụng, trong khi thực tế vai trò của nó nằm ở một giai đoạn khác trong quy trình phát triển.
Để giải quyết vấn đề này, cần phải chuyển đổi tư duy từ "môi trường" sang "quy trình" MLOps (Machine Learning Operations). Google Colab không phải là nơi để chạy một ứng dụng web end-to-end, mà là một môi trường mạnh mẽ được tối ưu hóa cho việc huấn luyện và phát triển mô hình AI. Nó cung cấp tài nguyên GPU/TPU miễn phí, giúp xử lý các tác vụ tính toán nặng một cách hiệu quả 1. Ngược lại, VSCode là môi trường để xây dựng và phục vụ (serve) mô hình đó như một API.
Quy trình chuẩn để tích hợp mô hình đã huấn luyện vào hệ thống ứng dụng bao gồm các bước sau [2, 3]:
1.Huấn luyện và Lưu trữ Mô hình: Sau khi hoàn tất quá trình huấn luyện trên Google Colab, mô hình cần được "chuẩn hóa" (serialize) và lưu lại dưới dạng một file, ví dụ như .pkl (đối với các mô hình Scikit-learn) hoặc .pt (đối với PyTorch). File này sau đó có thể được tải xuống từ Colab [3].
2.Xây dựng API Backend với FastAPI: Trong môi trường VSCode, nhóm sẽ phát triển một ứng dụng backend bằng FastAPI. Ứng dụng này có nhiệm vụ tải mô hình đã lưu từ file vào bộ nhớ khi khởi động. Một endpoint POST (ví dụ: /predict) sẽ được tạo để nhận dữ liệu đầu vào (ví dụ: video frame) và trả về kết quả dự đoán từ mô hình [2]. FastAPI được lựa chọn nhờ tốc độ cao, khả năng tạo tài liệu API tự động (/docs) và hỗ trợ tốt cho lập trình bất đồng bộ [2].
3.Đóng gói Ứng dụng bằng Docker: Đây là bước quan trọng nhất để giải quyết triệt để vấn đề tương thích môi trường. Toàn bộ ứng dụng (bao gồm code FastAPI, file mô hình, và tất cả các thư viện Python được liệt kê trong requirements.txt) sẽ được đóng gói vào một "container" Docker. Docker tạo ra một môi trường độc lập, cô lập, đảm bảo rằng ứng dụng sẽ chạy giống hệt nhau trên mọi hệ thống, từ máy tính của nhà phát triển đến môi trường sản xuất [2, 4, 5].
4.Quản lý với Docker Compose: Để dễ dàng quản lý nhiều dịch vụ (ví dụ: backend, frontend, PostgreSQL), một file docker-compose.yml có thể được sử dụng. File này định nghĩa cách các container được xây dựng và kết nối với nhau, cho phép toàn bộ hệ thống được khởi động chỉ với một lệnh duy nhất [2, 6].

1.3. Lộ trình Triển khai theo Giai đoạn (Phù hợp với SMEs)

Để đảm bảo dự án khả thi và đạt được mục tiêu ban đầu, việc triển khai nên được chia thành các giai đoạn rõ ràng:
●Giai đoạn 1 (MVP - Sản phẩm khả dụng tối thiểu): Tập trung vào việc xây dựng các chức năng cốt lõi (từ 1 đến 8 trong tài liệu gốc) 1. Trong giai đoạn này, hệ thống sẽ được triển khai trên máy tính cục bộ của người quản lý hoặc một máy chủ nhỏ. Mục tiêu là chứng minh tính khả thi của ý tưởng và thu thập phản hồi ban đầu.
●Giai đoạn 2 (Scale - Mở rộng): Khi hệ thống đã chứng minh được giá trị, nhóm sẽ tập trung vào tối ưu hóa hiệu suất mô hình và tích hợp hỗ trợ đa camera. Đây là lúc cần chuẩn bị để chuyển sang môi trường cloud (như AWS, Azure) để đảm bảo khả năng mở rộng [5].
●Giai đoạn 3 (Advanced - Nâng cao): Giai đoạn này dành cho việc phát triển các tính năng tùy chọn như phân tích dự đoán, gamification, hoặc chatbot quản lý, giúp nâng cao giá trị và sự cạnh tranh của sản phẩm 1.
Chương II: Chi Tiết Kỹ Thuật Chuyên Sâu về Mô Hình AI và Tối Ưu Hóa Hiệu Năng

2.1. Phân tích Các Module Computer Vision

Hệ thống EBD tận dụng một chuỗi các mô hình Computer Vision để thực hiện phân tích hành vi, mỗi mô hình đảm nhận một vai trò cụ thể 1.
●Nhận diện Bàn làm việc và Con người (YOLOv8): YOLOv8 là một mô hình phát hiện vật thể hiệu quả, nổi bật với tốc độ và độ chính xác cao. Nó rất phù hợp cho việc phân vùng bàn làm việc và phát hiện vị trí của nhân viên trong từng khung hình video 1.
●Nhận diện & Theo dõi Khuôn mặt (MTCNN & FaceNet): Quá trình này bao gồm hai bước. Đầu tiên, MTCNN được sử dụng để phát hiện khuôn mặt. Mô hình này rất "mạnh mẽ" (robust) và hoạt động tốt ngay cả trong điều kiện ánh sáng kém 1. Sau khi khuôn mặt được phát hiện, FaceNet sẽ tạo ra một vector embedding 128 chiều. Vector này đại diện cho các đặc điểm duy nhất của khuôn mặt, cho phép hệ thống so sánh và nhận diện nhân viên một cách hiệu quả 1. Để cải thiện hiệu quả nhận diện trong môi trường thiếu sáng, có thể áp dụng các kỹ thuật tiền xử lý hình ảnh như cân bằng histogram hoặc tăng độ tương phản.
●Theo dõi & Phân loại Hành vi (DeepSORT & CNN/LSTM): DeepSORT là một thuật toán theo dõi đa đối tượng tiên tiến, có khả năng gán một ID duy nhất cho từng người được phát hiện bởi YOLOv8 và theo dõi họ xuyên suốt các khung hình 1. Dữ liệu theo dõi từ DeepSORT, kết hợp với các mô hình học sâu như CNN hoặc LSTM, sẽ cho phép hệ thống phân loại các hành vi cụ thể dựa trên chuỗi frame video, từ đó xác định trạng thái làm việc của nhân viên.

2.2. Giải Quyết Bài Toán "Phân Biệt Nói Chuyện" không cần Âm thanh

Một trong những thách thức được nêu ra là việc phân biệt giữa "nói chuyện công việc" và "buôn chuyện" khi không có dữ liệu âm thanh 1. Mặc dù không thể dựa vào nội dung lời nói, vấn đề này hoàn toàn có thể được giải quyết bằng cách tập trung vào ngôn ngữ cơ thể và ngữ cảnh xã hội - một lĩnh vực tiên tiến của Computer Vision.
Có thể phân biệt các cuộc trò chuyện "formal" (chính thức) và "informal" (bình thường) dựa trên các đặc điểm sau:
●Ngữ cảnh của cuộc trò chuyện: Một cuộc họp chính thức thường có cấu trúc và mục đích rõ ràng, với một người nói chính và những người khác lắng nghe thụ động, hoặc tương tác với tài liệu và màn hình trình chiếu [7, 8]. Ngược lại, một cuộc trò chuyện không chính thức thường diễn ra giữa một nhóm nhỏ, có tính chất hai chiều, với sự trao đổi ý kiến tự phát, không có cấu trúc cố định [7, 8].
●Phân tích ngôn ngữ cơ thể: Các mô hình ước tính tư thế (pose estimation) có thể phát hiện các tư thế ngồi hoặc đứng của nhân viên, xác định xem họ đang ở tư thế "nghiêm túc" (ngồi thẳng, hướng về màn hình) hay "thư giãn" (ngả lưng, quay sang người khác) [9, 10].
●Phân tích tương tác xã hội: Bằng cách phân tích khoảng cách vật lý giữa các cá nhân, hướng nhìn (eye gaze), và các cử chỉ tay như chỉ trỏ (gesturing/pointing) vào một đối tượng cụ thể (ví dụ: màn hình), hệ thống có thể xây dựng một "đồ thị tương tác" [9, 10]. Các tương tác được đánh dấu là "formal" nếu có sự tương tác với các công cụ làm việc hoặc một luồng trình bày đơn hướng. Ngược lại, một cuộc trò chuyện có nhiều người cùng nói, không có sự tập trung vào một đối tượng cụ thể, có thể được phân loại là "informal" [7, 8].

2.3. Chiến lược Tối Ưu Hóa Hiệu suất Mô hình

Nhóm phát triển đã lo ngại về hiệu suất của các mô hình Computer Vision khi chạy trên máy tính cục bộ 1. Vấn đề không phải là mô hình quá "nặng" mà là chúng chưa được tối ưu hóa cho quá trình suy luận (inference) - tức là giai đoạn sử dụng mô hình để đưa ra dự đoán trong môi trường thực tế [11, 12]. Các mô hình được huấn luyện thường sử dụng độ chính xác cao (FP32), nhưng có thể được cải thiện đáng kể về tốc độ và kích thước mà không làm giảm đáng kể độ chính xác.
Các kỹ thuật tối ưu hóa mô hình AI bao gồm:
●Quantization (Lượng tử hóa): Kỹ thuật này giảm độ chính xác của các tham số và phép tính của mô hình, ví dụ, từ 32-bit floating-point (FP32) xuống 8-bit integer (INT8). Lượng tử hóa có thể giảm kích thước mô hình lên tới 4 lần và tăng tốc độ suy luận 2-4 lần, đồng thời giảm đáng kể băng thông bộ nhớ [11, 12, 13]. PyTorch cung cấp các API như torch.quantization.prepare_qat và torch.quantization.convert để thực hiện quá trình này một cách dễ dàng [11].
●Pruning (Tỉa mô hình): Kỹ thuật này loại bỏ các neuron, kết nối hoặc kênh (channel) không quan trọng khỏi mô hình [13, 14]. Pruning làm cho mô hình trở nên nhỏ hơn và ít phức tạp hơn, từ đó tăng tốc độ xử lý. Đây là một kỹ thuật bổ sung hiệu quả cho quantization.
Bảng dưới đây tóm tắt các lợi ích của việc tối ưu hóa:
Table 1: So sánh Các Phương pháp Tối ưu Hóa Mô hình AI
Thuộc tính	Model Gốc (FP32)	Quantized Model (INT8)	Pruned Model (Sparsified)
Độ chính xác	Cao nhất (điểm chuẩn)	Tương đương hoặc giảm nhẹ	Giảm nhẹ
Kích thước file	Lớn (điểm chuẩn)	Giảm ~4x [11]	Giảm đáng kể [14]
Tốc độ Inference	Trung bình (điểm chuẩn)	Tăng 2-4x [11]	Tăng đáng kể [14]
Yêu cầu Phần cứng	Cần GPU mạnh	Tối ưu cho CPU, GPU [12]	Cần thư viện/phần cứng chuyên biệt [14]
Mục đích chính	Huấn luyện và nghiên cứu	Tối ưu hóa triển khai	Giảm độ phức tạp mô hình [13]
Chương III: Kiến Trúc Phần Mềm và Cấu Trúc Code Toàn Diện

3.1. Đề xuất Kiến trúc Monorepo

Để quản lý codebase phức tạp với nhiều thành phần (frontend, backend, các thư viện dùng chung), kiến trúc monorepo là một lựa chọn tối ưu [15, 16]. Kiến trúc này cho phép quản lý tất cả các dự án con trong một kho lưu trữ duy nhất, giúp dễ dàng chia sẻ code, đảm bảo tính nhất quán và đơn giản hóa quá trình phát triển. Một trong những lợi ích lớn nhất là khả năng chia sẻ các định nghĩa dữ liệu (như Pydantic models từ FastAPI) giữa frontend và backend, từ đó đảm bảo tính toàn vẹn và an toàn kiểu dữ liệu (type-safe) [16].
Cấu trúc thư mục được đề xuất như sau [16, 17, 18]:
Table 2: Cấu trúc Thư mục Monorepo Đề xuất
Thư mục	Nội dung	Vai trò
/<project_root>		
├── apps/		Chứa các ứng dụng độc lập
│ ├── frontend/	Ứng dụng ReactJS	Giao diện người dùng
│ └── backend/	Ứng dụng FastAPI	Dịch vụ backend và AI API
├── packages/		Chứa các thư viện dùng chung
│ ├── ui/	Các React component có thể tái sử dụng	Thư viện giao diện người dùng
│ └── ml-types/	Định nghĩa Pydantic/TypeScript	Đảm bảo tính nhất quán giữa front/back
├── Dockerfile		Định nghĩa container Docker
└── docker-compose.yml		Quản lý và điều phối các service

3.2. Triển khai và Xây dựng Backend với FastAPI

Backend sẽ được xây dựng theo kiến trúc module để dễ dàng bảo trì và mở rộng [17].
●Cấu trúc Module:
○app.py: Điểm vào chính của ứng dụng.
○routers/: Chứa các API endpoints, được chia theo chức năng (ví dụ: users.py, analysis.py). Mỗi file định nghĩa các route và sử dụng APIRouter để tổ chức code một cách rõ ràng [17].
○services/: Chứa các logic nghiệp vụ, tách biệt khỏi các route.
○db/: Chứa các hàm tương tác với cơ sở dữ liệu.
●API cho Model Inference:
○Tạo endpoint /analyze để xử lý luồng video.
○Sử dụng WebSocket để truyền dữ liệu phân tích theo thời gian thực về frontend, cho phép hiển thị dashboard trực tiếp 1.
●Tối ưu hóa GPU: Để tận dụng tối đa tài nguyên GPU khi xử lý nhiều yêu cầu đồng thời, FastAPI có thể được cấu hình để sử dụng các kỹ thuật bất đồng bộ (asyncio). Đồng thời, việc sử dụng asyncio.Semaphore sẽ giới hạn số lượng request được xử lý song song, giúp giữ cho GPU luôn bận rộn và tránh tình trạng quá tải, từ đó tối đa hóa hiệu suất [19].

3.3. Xây dựng Frontend với ReactJS và Tương tác API

Frontend sẽ được xây dựng trên nền tảng ReactJS với các nguyên tắc thiết kế component có thể tái sử dụng [18, 20].
●Cấu trúc Component: Các thành phần giao diện sẽ được tổ chức thành các thư mục con, mỗi thư mục chứa một component và các file liên quan (style, test, v.v.), giúp dễ quản lý và tái sử dụng [18].
●Quản lý State và API: Sử dụng Redux Toolkit (RTK Query) để quản lý state và tương tác với các API của backend một cách hiệu quả. RTK Query tự động tạo ra các hooks để gọi API, quản lý caching, và xử lý các trạng thái loading/error, giúp giảm đáng kể lượng code phải viết [16].
●Tích hợp Realtime: Kết nối với WebSocket endpoint của backend để nhận dữ liệu log và cảnh báo theo thời gian thực, hiển thị ngay lập tức trên dashboard 1.
Chương IV: Dữ Liệu, Cơ Sở Dữ liệu và Các Yêu cầu Chức năng Bổ sung

4.1. Cơ sở Dữ liệu PostgreSQL và Chiến lược Data Seeding

Người dùng đã tìm thấy thông tin của ba nhân viên trên các trang web học thuật công khai 1. Tuy nhiên, việc sử dụng trực tiếp các thông tin này để "seed" cơ sở dữ liệu cho dự án là không phù hợp và có thể vi phạm các quy định về quyền riêng tư nghiêm ngặt như GDPR/PDPA [21, 22].
Những thông tin tìm được là hồ sơ học thuật của các nhà nghiên cứu uy tín, chuyên về lĩnh vực Khoa học Máy tính và Tin học, không phải là dữ liệu của nhân viên văn phòng để sử dụng trong một hệ thống giám sát [23, 24]. Cần làm rõ rằng đây là dữ liệu "nghiên cứu", không phải dữ liệu "thực tế" cho mục đích này.
Giải pháp được đề xuất là tạo một bộ dữ liệu tổng hợp (synthetic data) dựa trên cấu trúc thông tin của các nhân viên này (ví dụ: tên, ID, chức vụ giả lập). Bộ dữ liệu này chỉ phục vụ cho mục đích demo và PoC, đảm bảo không vi phạm bất kỳ quy tắc bảo mật nào. Đối với dữ liệu thực tế trong tương lai, cần có một quy trình thu thập dữ liệu hợp pháp: lấy sự đồng ý rõ ràng của nhân viên, sử dụng các phương pháp ẩn danh dữ liệu (data anonymization), và tuân thủ chặt chẽ các quy định về quyền riêng tư [1, 21].

4.2. Cải tiến Giao diện và Trải nghiệm Người dùng

●Tích hợp Lịch (Calendar): Dự án cần một giao diện lịch để hiển thị lịch làm việc, ca làm, và các sự kiện vi phạm. react-big-calendar là thư viện phù hợp nhất cho nhu cầu này [25, 26]. Nó được thiết kế chuyên biệt để hiển thị các "sự kiện" (event-based calendar), cho phép người dùng xem và quản lý các lịch trình làm việc, thời gian nghỉ giải lao, và các vi phạm một cách trực quan [25]. Đối với các chức năng đơn giản hơn như chọn một ngày để xem báo cáo, có thể sử dụng các thư viện nhẹ hơn như react-datepicker hoặc react-calendar [26].
●Giao diện Chủ đề Xanh lá: Để dễ dàng thay đổi giao diện theo một chủ đề màu sắc nhất quán, nên sử dụng CSS Variables (Custom Properties). Kỹ thuật này cho phép định nghĩa các biến màu sắc, ví dụ: --primary-color: green;, tại một nơi duy nhất. Các thành phần giao diện sau đó sẽ sử dụng biến này (background-color: var(--primary-color);), cho phép thay đổi toàn bộ bảng màu chỉ bằng cách chỉnh sửa một biến duy nhất [27]. Các thư viện như Tailwind CSS cũng hỗ trợ khái niệm này, cho phép tạo ra một "Design Token" để quản lý toàn bộ hệ thống thiết kế [28, 29].

4.3. Giải pháp cho các "Phân vân" khác

Bảng sau đây tổng hợp các băn khoăn còn lại của nhóm và đưa ra giải pháp kỹ thuật cụ thể.
Table 3: Tổng hợp Băn khoăn và Giải pháp Chi tiết

Băn khoăn	Phân tích vấn đề	Giải pháp đề xuất	Công nghệ/Kỹ thuật
Dataset nhỏ 1	Dataset hiện tại chỉ có 3 nhân viên, khó để huấn luyện mô hình mạnh mẽ và có thể mở rộng.	Xây dựng chiến lược thu thập dữ liệu nội bộ bằng cách thu thêm video từ nhiều camera và nhân viên hơn (10-15 người), với sự đồng ý.	Dữ liệu nội bộ có kiểm soát, fine-tune mô hình.
Nhận diện khuôn mặt trong ánh sáng yếu 1	Ánh sáng kém làm giảm độ chính xác của các mô hình nhận diện khuôn mặt.	Áp dụng các kỹ thuật xử lý hình ảnh tiền xử lý như cân bằng histogram để cải thiện chất lượng ảnh trước khi đưa vào mô hình.	OpenCV, các thuật toán xử lý hình ảnh.
Đa ngôn ngữ 1	i18next tốn thời gian để cấu hình và quản lý.	Sử dụng các thư viện thay thế với cú pháp gọn gàng hơn hoặc hỗ trợ tốt hơn cho TypeScript.	react-intl (từ FormatJS) hoặc LinguiJS [30, 31].
Quyền riêng tư (GDPR/PDPA) 1	Dữ liệu nhạy cảm của nhân viên cần được bảo vệ theo các quy định pháp luật.	Mã hóa dữ liệu (AES-256), phân quyền truy cập (RBAC) và xây dựng chính sách thu thập/lưu trữ dữ liệu có sự đồng ý rõ ràng.	JWT, AES-256, PostgreSQL.
Chương V: Kết luận và Hướng Phát triển Tương lai

5.1. Tóm tắt Đánh giá

Báo cáo này đã cung cấp một lộ trình chi tiết và toàn diện để chuyển đổi dự án EBD từ giai đoạn ý tưởng sang một sản phẩm thực tiễn. Các khuyến nghị cốt lõi xoay quanh việc áp dụng tư duy MLOps để quản lý quy trình từ huấn luyện đến triển khai mô hình, tối ưu hóa hiệu suất thông qua các kỹ thuật như quantization và pruning, và xây dựng một kiến trúc phần mềm vững chắc bằng cách sử dụng monorepo. Đồng thời, các giải pháp sáng tạo cho việc phân tích hành vi không cần âm thanh và cách tiếp cận đúng đắn với vấn đề dữ liệu đã được trình bày.

5.2. Lộ trình Mở rộng Dự án

Dựa trên nền tảng kiến trúc đã đề xuất, nhóm có thể mở rộng dự án theo các hướng sau 1:
●Mở rộng Dữ liệu: Thu thập thêm dữ liệu nội bộ chất lượng cao để fine-tune các mô hình hiện tại, từ đó nâng cao độ chính xác và khả năng tổng quát hóa của hệ thống.
●Tích hợp AI Nâng cao: Áp dụng các mô hình học máy để phân tích dự đoán (Predictive Analytics), nhận diện xu hướng năng suất và đề xuất các chính sách phù hợp. Ngoài ra, việc phát triển các tính năng gamification và chatbot sẽ làm tăng trải nghiệm người dùng và giá trị của sản phẩm.

5.3. Lời Kết

Với những phân tích và hướng dẫn chi tiết này, nhóm phát triển EBD đã có một kim chỉ nam vững chắc để tiếp tục hành trình. Các thách thức kỹ thuật không phải là rào cản, mà là cơ hội để áp dụng các kỹ thuật tiên tiến và xây dựng một sản phẩm thực sự đột phá. Sự chuẩn bị kỹ lưỡng này sẽ đảm bảo dự án không chỉ hoạt động tốt trên lý thuyết mà còn thành công trong thực tế. Chúc nhóm bạn gặt hái được những thành công lớn với dự án đầy tiềm năng này.
Nguồn trích dẫn
1.ATI FINAL_EBD SYSTEM (3).docx