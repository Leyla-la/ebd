generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id         String    @id @default(cuid())
  employeeId String?
  adminId    String?
  type       String
  title      String
  content    String
  sentAt     DateTime
  read       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  admin      Admin?    @relation("AdminNotifications", fields: [adminId], references: [id], onDelete: Cascade)
  employee   Employee? @relation("EmployeeNotifications", fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([adminId])
  @@map("notifications")
}

model EbdLog {
  id          String   @id @default(cuid())
  employeeId  String
  timestamp   DateTime
  eventType   String
  value       Float
  description String?
  severity    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@map("ebd_logs")
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String
  type         String
  status       String
  deadline     DateTime?
  completedAt  DateTime?
  assignedToId String?
  assignedById String?
  history      Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignedBy   Admin?    @relation("AssignedByTasks", fields: [assignedById], references: [id])
  assignedTo   Employee? @relation("AssignedTasks", fields: [assignedToId], references: [id])

  @@index([assignedToId])
  @@index([assignedById])
  @@map("tasks")
}

model User {
  id             String    @id @default(cuid())
  cognitoId      String?   @unique
  email          String    @unique
  hashedPassword String?
  role           UserRole  @default(EMPLOYEE)
  isActive       Boolean   @default(true)
  isSuperuser    Boolean   @default(false)
  name           String?
  avatar         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  admin          Admin?
  employee       Employee?

  @@map("users")
}

model Admin {
  id              String         @id @default(cuid())
  userId          String         @unique
  name            String
  email           String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications   Notification[] @relation("AdminNotifications")
  assignedByTasks Task[]         @relation("AssignedByTasks")

  @@map("admins")
}

model Employee {
  id                    String                 @id @default(cuid())
  userId                String                 @unique
  employeeCode          String                 @unique
  name                  String
  email                 String                 @unique
  personalEmail         String?                @unique
  phoneNumber           String?
  gender                Gender?
  dateOfBirth           DateTime?
  maritalStatus         MaritalStatus?
  nationality           String?
  religion              String?
  placeOfBirth          String?
  address               Json?
  bankAccountNumber     String?
  bankName              String?
  avatarUrl             String?
  avatarFile            Bytes?
  departmentId          String?
  hireDate              DateTime
  endDate               DateTime?
  status                EmployeeStatus         @default(ACTIVE)
  position              String
  faceEmbedding         Float[]
  deskId                String?                @unique
  points                Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  activities            Activity[]
  activityConfirmations ActivityConfirmation[]
  contracts             Contract[]
  ebdLogs               EbdLog[]
  emergencyContacts     EmergencyContact[]
  achievements          EmployeeAchievement[]
  shifts                EmployeeShift[]
  department            Department?            @relation(fields: [departmentId], references: [id])
  desk                  Desk?                  @relation(fields: [deskId], references: [id])
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaves                Leave[]
  notifications         Notification[]         @relation("EmployeeNotifications")
  payrolls              Payroll[]
  assignedTasks         Task[]                 @relation("AssignedTasks")
  warnings              Warning[]

  @@index([departmentId])
  @@index([status])
  @@map("employees")
}

model Contract {
  id             String         @id @default(cuid())
  employeeId     String
  contractNumber String         @unique
  contractType   ContractType
  status         ContractStatus @default(ACTIVE)
  startDate      DateTime
  endDate        DateTime?
  jobTitle       String
  salary         Float
  salaryCurrency String         @default("USD")
  filePath       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  employee       Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([status])
  @@map("contracts")
}

model EmergencyContact {
  id           String   @id @default(cuid())
  employeeId   String
  name         String
  relationship String
  phoneNumber  String
  email        String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, name])
  @@index([employeeId])
  @@map("emergency_contacts")
}

model Payroll {
  id                 String         @id @default(cuid())
  employeeId         String
  payPeriodStart     DateTime?
  payPeriodEnd       DateTime?
  payDate            DateTime?
  payRate            Float?
  payFrequency       PayFrequency?
  hoursWorked        Float?
  grossPay           Float?
  deductions         Json?
  bonuses            Json?
  netPay             Float?
  status             PayrollStatus? @default(PENDING)
  paymentMethod      String?
  month              String?
  year               Int?
  baseSalary         Float?
  allowance          Float?
  bonus              Float?
  deduction          Float?
  tax                Float?
  kpiAttendance      Float?
  kpiBehaviour       Float?
  kpiPerformance     Float?
  kpiTotal           Float?
  bonusByKPI         Float?
  penaltyByBehaviour Float?
  netSalary          Float?
  paymentStatus      String?
  autoDeducted       Boolean?
  payrollFileUrl     String?
  paymentDate        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  employee           Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, payPeriodStart, payPeriodEnd])
  @@index([status])
  @@map("payrolls")
}

model Leave {
  id         String      @id @default(cuid())
  employeeId String
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  reason     String?
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   Employee    @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([status])
  @@map("leaves")
}

model Desk {
  id         String     @id @default(cuid())
  label      String     @unique
  zone       String?
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activities Activity[]
  employee   Employee?

  @@map("desks")
}

model Camera {
  id         String     @id @default(cuid())
  name       String
  source     String
  location   String?
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activities Activity[]

  @@map("cameras")
}

model Activity {
  id           String       @id @default(cuid())
  employeeId   String
  deskId       String?
  cameraId     String?
  activityType ActivityType
  startTime    DateTime
  endTime      DateTime?
  details      Json?
  createdAt    DateTime     @default(now())
  camera       Camera?      @relation(fields: [cameraId], references: [id])
  desk         Desk?        @relation(fields: [deskId], references: [id])
  employee     Employee     @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([activityType])
  @@map("activities")
}

model Policy {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  rules       Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("policies")
}

model Warning {
  id         String   @id @default(cuid())
  employeeId String
  reason     String
  severity   Severity
  isRead     Boolean  @default(false)
  timestamp  DateTime
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([severity])
  @@map("warnings")
}

model Shift {
  id        String          @id @default(cuid())
  name      String          @unique
  startTime String
  endTime   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  employees EmployeeShift[]

  @@map("shifts")
}

model EmployeeShift {
  employeeId String
  shiftId    String
  assignedAt DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])
  shift      Shift    @relation(fields: [shiftId], references: [id])

  @@id([employeeId, shiftId])
  @@map("employee_shifts")
}

model AuditLog {
  id        String   @id @default(cuid())
  actor     String
  action    String
  target    String?
  details   Json?
  ipAddress String?
  createdAt DateTime @default(now())

  @@index([actor])
  @@index([action])
  @@map("audit_logs")
}

model SystemSetting {
  key         String   @id
  value       Json
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model Department {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]

  @@map("departments")
}

model Achievement {
  id          String                @id @default(cuid())
  name        String                @unique
  description String
  points      Int
  icon        String
  employees   EmployeeAchievement[]

  @@map("achievements")
}

model EmployeeAchievement {
  id            String      @id @default(cuid())
  employeeId    String
  achievementId String
  awardedAt     DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  employee      Employee    @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, achievementId])
  @@map("employee_achievements")
}

model ActivityConfirmation {
  id          String   @id @default(cuid())
  trackId     String
  employeeId  String
  activity    String
  value       Float
  reason      String?
  confirmedBy String?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@map("activity_confirmations")
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum ContractType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  INTERN
}

enum ContractStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  ANNUAL
  SICK
  UNPAID
}

enum PayrollStatus {
  PENDING
  PAID
  FAILED
}

enum PayFrequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  ANNUALLY
}

enum ActivityType {
  WORKING
  TYPING
  USING_COMPUTER
  READING_DOCUMENT
  ABSENT
  PHONE_USAGE
  SLEEPING
  TALKING
  WALKING
  BREAK
  OTHER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
